/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Base cases for null nodes
        if (p == null && q == null) return true; // Both nodes are null, trees are identical
        if (p == null || q == null) return false; // One node is null, the other is not
        
        // Check the values of the current nodes
        if (p.val != q.val) return false; // Values are not equal, trees are not identical
        
        // Check left subtree and return immediately if not identical
        if (isSameTree(p.left, q.left)==false) return false;
        
        // Check right subtree and return immediately if not identical
        if (isSameTree(p.right, q.right)==false) return false;
        
        // If both subtrees are identical, return true
        return true;
    }
}
